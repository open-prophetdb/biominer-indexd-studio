"use strict";(self.webpackChunkbiominer_indexd_studio=self.webpackChunkbiominer_indexd_studio||[]).push([[3919],{95:function(K,O,b){b.d(O,{Z:function(){return E}});var g=b(1449);function E(M,k){k===void 0&&(k={});var w=Number(M[0]),G=Number(M[1]),L=Number(M[2]),D=Number(M[3]);if(M.length===6)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var A=[w,G],s=[w,D],m=[L,D],p=[L,G];return(0,g.yu)([[A,p,m,s,A]],k.properties,{bbox:M,id:k.id})}},1449:function(K,O,b){b.d(O,{Tu:function(){return m},tw:function(){return W},uf:function(){return C},yu:function(){return A},zL:function(){return w}});var g=63710088e-1,E={centimeters:g*100,centimetres:g*100,degrees:g/111325,feet:g*3.28084,inches:g*39.37,kilometers:g/1e3,kilometres:g/1e3,meters:g,metres:g,miles:g/1609.344,millimeters:g*1e3,millimetres:g*1e3,nauticalmiles:g/1852,radians:1,yards:g*1.0936},M={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:1/1e3,kilometres:1/1e3,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/g,yards:1.0936133},k={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046};function w(i,t,r){r===void 0&&(r={});var v={type:"Feature"};return(r.id===0||r.id)&&(v.id=r.id),r.bbox&&(v.bbox=r.bbox),v.properties=t||{},v.geometry=i,v}function G(i,t,r){switch(r===void 0&&(r={}),i){case"Point":return L(t).geometry;case"LineString":return m(t).geometry;case"Polygon":return A(t).geometry;case"MultiPoint":return F(t).geometry;case"MultiLineString":return q(t).geometry;case"MultiPolygon":return W(t).geometry;default:throw new Error(i+" is invalid")}}function L(i,t,r){if(r===void 0&&(r={}),!i)throw new Error("coordinates is required");if(!Array.isArray(i))throw new Error("coordinates must be an Array");if(i.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!l(i[0])||!l(i[1]))throw new Error("coordinates must contain numbers");var v={type:"Point",coordinates:i};return w(v,t,r)}function D(i,t,r){return r===void 0&&(r={}),C(i.map(function(v){return L(v,t)}),r)}function A(i,t,r){r===void 0&&(r={});for(var v=0,R=i;v<R.length;v++){var P=R[v];if(P.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var N=0;N<P[P.length-1].length;N++)if(P[P.length-1][N]!==P[0][N])throw new Error("First and last Position are not equivalent.")}var S={type:"Polygon",coordinates:i};return w(S,t,r)}function s(i,t,r){return r===void 0&&(r={}),C(i.map(function(v){return A(v,t)}),r)}function m(i,t,r){if(r===void 0&&(r={}),i.length<2)throw new Error("coordinates must be an array of two or more positions");var v={type:"LineString",coordinates:i};return w(v,t,r)}function p(i,t,r){return r===void 0&&(r={}),C(i.map(function(v){return m(v,t)}),r)}function C(i,t){t===void 0&&(t={});var r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=i,r}function q(i,t,r){r===void 0&&(r={});var v={type:"MultiLineString",coordinates:i};return w(v,t,r)}function F(i,t,r){r===void 0&&(r={});var v={type:"MultiPoint",coordinates:i};return w(v,t,r)}function W(i,t,r){r===void 0&&(r={});var v={type:"MultiPolygon",coordinates:i};return w(v,t,r)}function z(i,t,r){r===void 0&&(r={});var v={type:"GeometryCollection",geometries:i};return w(v,t,r)}function Z(i,t){if(t===void 0&&(t=0),t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(i*r)/r}function u(i,t){t===void 0&&(t="kilometers");var r=E[t];if(!r)throw new Error(t+" units is invalid");return i*r}function a(i,t){t===void 0&&(t="kilometers");var r=E[t];if(!r)throw new Error(t+" units is invalid");return i/r}function o(i,t){return f(a(i,t))}function e(i){var t=i%360;return t<0&&(t+=360),t}function f(i){var t=i%(2*Math.PI);return t*180/Math.PI}function n(i){var t=i%360;return t*Math.PI/180}function c(i,t,r){if(t===void 0&&(t="kilometers"),r===void 0&&(r="kilometers"),!(i>=0))throw new Error("length must be a positive number");return u(a(i,t),r)}function y(i,t,r){if(t===void 0&&(t="meters"),r===void 0&&(r="kilometers"),!(i>=0))throw new Error("area must be a positive number");var v=k[t];if(!v)throw new Error("invalid original units");var R=k[r];if(!R)throw new Error("invalid final units");return i/v*R}function l(i){return!isNaN(i)&&i!==null&&!Array.isArray(i)}function h(i){return!!i&&i.constructor===Object}function _(i){if(!i)throw new Error("bbox is required");if(!Array.isArray(i))throw new Error("bbox must be an Array");if(i.length!==4&&i.length!==6)throw new Error("bbox must be an Array of 4 or 6 numbers");i.forEach(function(t){if(!l(t))throw new Error("bbox must only contain numbers")})}function d(i){if(!i)throw new Error("id is required");if(["string","number"].indexOf(typeof i)===-1)throw new Error("id must be a number or a string")}},36987:function(K,O,b){b.d(O,{r7:function(){return M},wA:function(){return D}});var g=b(1449);function E(s){if(!s)throw new Error("coord is required");if(!Array.isArray(s)){if(s.type==="Feature"&&s.geometry!==null&&s.geometry.type==="Point")return s.geometry.coordinates;if(s.type==="Point")return s.coordinates}if(Array.isArray(s)&&s.length>=2&&!Array.isArray(s[0])&&!Array.isArray(s[1]))return s;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function M(s){if(Array.isArray(s))return s;if(s.type==="Feature"){if(s.geometry!==null)return s.geometry.coordinates}else if(s.coordinates)return s.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function k(s){if(s.length>1&&isNumber(s[0])&&isNumber(s[1]))return!0;if(Array.isArray(s[0])&&s[0].length)return k(s[0]);throw new Error("coordinates must only contain numbers")}function w(s,m,p){if(!m||!p)throw new Error("type and name required");if(!s||s.type!==m)throw new Error("Invalid input to "+p+": must be a "+m+", given "+s.type)}function G(s,m,p){if(!s)throw new Error("No feature passed");if(!p)throw new Error(".featureOf() requires a name");if(!s||s.type!=="Feature"||!s.geometry)throw new Error("Invalid input to "+p+", Feature with geometry required");if(!s.geometry||s.geometry.type!==m)throw new Error("Invalid input to "+p+": must be a "+m+", given "+s.geometry.type)}function L(s,m,p){if(!s)throw new Error("No featureCollection passed");if(!p)throw new Error(".collectionOf() requires a name");if(!s||s.type!=="FeatureCollection")throw new Error("Invalid input to "+p+", FeatureCollection required");for(var C=0,q=s.features;C<q.length;C++){var F=q[C];if(!F||F.type!=="Feature"||!F.geometry)throw new Error("Invalid input to "+p+", Feature with geometry required");if(!F.geometry||F.geometry.type!==m)throw new Error("Invalid input to "+p+": must be a "+m+", given "+F.geometry.type)}}function D(s){return s.type==="Feature"?s.geometry:s}function A(s,m){return s.type==="FeatureCollection"?"FeatureCollection":s.type==="GeometryCollection"?"GeometryCollection":s.type==="Feature"&&s.geometry!==null?s.geometry.type:s.type}},39034:function(K,O,b){b.d(O,{nG:function(){return m},pZ:function(){return E}});var g=b(1449);function E(u,a,o){if(u!==null)for(var e,f,n,c,y,l,h,_=0,d=0,i,t=u.type,r=t==="FeatureCollection",v=t==="Feature",R=r?u.features.length:1,P=0;P<R;P++){h=r?u.features[P].geometry:v?u.geometry:u,i=h?h.type==="GeometryCollection":!1,y=i?h.geometries.length:1;for(var N=0;N<y;N++){var S=0,T=0;if(c=i?h.geometries[N]:h,c!==null){l=c.coordinates;var B=c.type;switch(_=o&&(B==="Polygon"||B==="MultiPolygon")?1:0,B){case null:break;case"Point":if(a(l,d,P,S,T)===!1)return!1;d++,S++;break;case"LineString":case"MultiPoint":for(e=0;e<l.length;e++){if(a(l[e],d,P,S,T)===!1)return!1;d++,B==="MultiPoint"&&S++}B==="LineString"&&S++;break;case"Polygon":case"MultiLineString":for(e=0;e<l.length;e++){for(f=0;f<l[e].length-_;f++){if(a(l[e][f],d,P,S,T)===!1)return!1;d++}B==="MultiLineString"&&S++,B==="Polygon"&&T++}B==="Polygon"&&S++;break;case"MultiPolygon":for(e=0;e<l.length;e++){for(T=0,f=0;f<l[e].length;f++){for(n=0;n<l[e][f].length-_;n++){if(a(l[e][f][n],d,P,S,T)===!1)return!1;d++}T++}S++}break;case"GeometryCollection":for(e=0;e<c.geometries.length;e++)if(E(c.geometries[e],a,o)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function M(u,a,o,e){var f=o;return E(u,function(n,c,y,l,h){c===0&&o===void 0?f=n:f=a(f,n,c,y,l,h)},e),f}function k(u,a){var o;switch(u.type){case"FeatureCollection":for(o=0;o<u.features.length&&a(u.features[o].properties,o)!==!1;o++);break;case"Feature":a(u.properties,0);break}}function w(u,a,o){var e=o;return k(u,function(f,n){n===0&&o===void 0?e=f:e=a(e,f,n)}),e}function G(u,a){if(u.type==="Feature")a(u,0);else if(u.type==="FeatureCollection")for(var o=0;o<u.features.length&&a(u.features[o],o)!==!1;o++);}function L(u,a,o){var e=o;return G(u,function(f,n){n===0&&o===void 0?e=f:e=a(e,f,n)}),e}function D(u){var a=[];return E(u,function(o){a.push(o)}),a}function A(u,a){var o,e,f,n,c,y,l,h,_,d,i=0,t=u.type==="FeatureCollection",r=u.type==="Feature",v=t?u.features.length:1;for(o=0;o<v;o++){for(y=t?u.features[o].geometry:r?u.geometry:u,h=t?u.features[o].properties:r?u.properties:{},_=t?u.features[o].bbox:r?u.bbox:void 0,d=t?u.features[o].id:r?u.id:void 0,l=y?y.type==="GeometryCollection":!1,c=l?y.geometries.length:1,f=0;f<c;f++){if(n=l?y.geometries[f]:y,n===null){if(a(null,i,h,_,d)===!1)return!1;continue}switch(n.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(a(n,i,h,_,d)===!1)return!1;break}case"GeometryCollection":{for(e=0;e<n.geometries.length;e++)if(a(n.geometries[e],i,h,_,d)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}i++}}function s(u,a,o){var e=o;return A(u,function(f,n,c,y,l){n===0&&o===void 0?e=f:e=a(e,f,n,c,y,l)}),e}function m(u,a){A(u,function(o,e,f,n,c){var y=o===null?null:o.type;switch(y){case null:case"Point":case"LineString":case"Polygon":return a((0,g.zL)(o,f,{bbox:n,id:c}),e,0)===!1?!1:void 0}var l;switch(y){case"MultiPoint":l="Point";break;case"MultiLineString":l="LineString";break;case"MultiPolygon":l="Polygon";break}for(var h=0;h<o.coordinates.length;h++){var _=o.coordinates[h],d={type:l,coordinates:_};if(a((0,g.zL)(d,f),e,h)===!1)return!1}})}function p(u,a,o){var e=o;return m(u,function(f,n,c){n===0&&c===0&&o===void 0?e=f:e=a(e,f,n,c)}),e}function C(u,a){m(u,function(o,e,f){var n=0;if(o.geometry){var c=o.geometry.type;if(!(c==="Point"||c==="MultiPoint")){var y,l=0,h=0,_=0;if(E(o,function(d,i,t,r,v){if(y===void 0||e>l||r>h||v>_){y=d,l=e,h=r,_=v,n=0;return}var R=lineString([y,d],o.properties);if(a(R,e,f,v,n)===!1)return!1;n++,y=d})===!1)return!1}}})}function q(u,a,o){var e=o,f=!1;return C(u,function(n,c,y,l,h){f===!1&&o===void 0?e=n:e=a(e,n,c,y,l,h),f=!0}),e}function F(u,a){if(!u)throw new Error("geojson is required");m(u,function(o,e,f){if(o.geometry!==null){var n=o.geometry.type,c=o.geometry.coordinates;switch(n){case"LineString":if(a(o,e,f,0,0)===!1)return!1;break;case"Polygon":for(var y=0;y<c.length;y++)if(a(lineString(c[y],o.properties),e,f,y)===!1)return!1;break}}})}function W(u,a,o){var e=o;return F(u,function(f,n,c,y){n===0&&o===void 0?e=f:e=a(e,f,n,c,y)}),e}function z(u,a){if(a=a||{},!isObject(a))throw new Error("options is invalid");var o=a.featureIndex||0,e=a.multiFeatureIndex||0,f=a.geometryIndex||0,n=a.segmentIndex||0,c=a.properties,y;switch(u.type){case"FeatureCollection":o<0&&(o=u.features.length+o),c=c||u.features[o].properties,y=u.features[o].geometry;break;case"Feature":c=c||u.properties,y=u.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":y=u;break;default:throw new Error("geojson is invalid")}if(y===null)return null;var l=y.coordinates;switch(y.type){case"Point":case"MultiPoint":return null;case"LineString":return n<0&&(n=l.length+n-1),lineString([l[n],l[n+1]],c,a);case"Polygon":return f<0&&(f=l.length+f),n<0&&(n=l[f].length+n-1),lineString([l[f][n],l[f][n+1]],c,a);case"MultiLineString":return e<0&&(e=l.length+e),n<0&&(n=l[e].length+n-1),lineString([l[e][n],l[e][n+1]],c,a);case"MultiPolygon":return e<0&&(e=l.length+e),f<0&&(f=l[e].length+f),n<0&&(n=l[e][f].length-n-1),lineString([l[e][f][n],l[e][f][n+1]],c,a)}throw new Error("geojson is invalid")}function Z(u,a){if(a=a||{},!isObject(a))throw new Error("options is invalid");var o=a.featureIndex||0,e=a.multiFeatureIndex||0,f=a.geometryIndex||0,n=a.coordIndex||0,c=a.properties,y;switch(u.type){case"FeatureCollection":o<0&&(o=u.features.length+o),c=c||u.features[o].properties,y=u.features[o].geometry;break;case"Feature":c=c||u.properties,y=u.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":y=u;break;default:throw new Error("geojson is invalid")}if(y===null)return null;var l=y.coordinates;switch(y.type){case"Point":return point(l,c,a);case"MultiPoint":return e<0&&(e=l.length+e),point(l[e],c,a);case"LineString":return n<0&&(n=l.length+n),point(l[n],c,a);case"Polygon":return f<0&&(f=l.length+f),n<0&&(n=l[f].length+n),point(l[f][n],c,a);case"MultiLineString":return e<0&&(e=l.length+e),n<0&&(n=l[e].length+n),point(l[e][n],c,a);case"MultiPolygon":return e<0&&(e=l.length+e),f<0&&(f=l[e].length+f),n<0&&(n=l[e][f].length-n),point(l[e][f][n],c,a)}throw new Error("geojson is invalid")}},51287:function(K,O,b){var g=b(32676),E=b(36987),M=b(1449);function k(w,G,L){L===void 0&&(L={});var D=(0,E.wA)(w),A=(0,E.wA)(G),s=g.union(D.coordinates,A.coordinates);return s.length===0?null:s.length===1?(0,M.yu)(s[0],L.properties):(0,M.tw)(s,L.properties)}O.Z=k}}]);
